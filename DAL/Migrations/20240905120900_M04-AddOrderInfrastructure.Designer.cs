// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240905120900_M04-AddOrderInfrastructure")]
    partial class M04AddOrderInfrastructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "47c76f67-dabb-4328-b778-9ef604f56bb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38a0b8cb-b383-4e34-afb9-1eb5c8cbe188",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "Marketplace",
                            Lastname = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEIYZMNKHzVYHmATj+GKLeywssvtsgp93NK8by7DkWJn3Y0kzIrR7UqrUFb+tUQHzcA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32381913-2f0b-4140-b5e7-c7ad1e24a3a1",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("DAL.Models.AttributeGroupModel", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("AttachedToCategory")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Attached Category Key")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created At")
                        .HasColumnOrder(4);

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Group")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Modified At")
                        .HasColumnOrder(5);

                    b.HasKey("Key");

                    b.HasIndex("AttachedToCategory");

                    b.ToTable("AttributeGroupStorage");
                });

            modelBuilder.Entity("DAL.Models.AttributeModel", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("AttachedToGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Attached To Group");

                    b.Property<string>("Attribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attribute")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created At")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Modified At")
                        .HasColumnOrder(5);

                    b.HasKey("Key");

                    b.HasIndex("AttachedToGroup");

                    b.ToTable("AttributeStorage");
                });

            modelBuilder.Entity("DAL.Models.CategoryModel", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("AttachedToCategory")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Attached Category Key")
                        .HasColumnOrder(4);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Category")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created At")
                        .HasColumnOrder(5);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Modified At")
                        .HasColumnOrder(6);

                    b.HasKey("Key");

                    b.HasIndex("AttachedToCategory");

                    b.ToTable("CategoryStorage");
                });

            modelBuilder.Entity("DAL.Models.OrderModel", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address")
                        .HasColumnOrder(3);

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("Ordered Amount");

                    b.Property<string>("AttachedProduct")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attached Product")
                        .HasColumnOrder(5);

                    b.Property<string>("AttachedUsername")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attached User")
                        .HasColumnOrder(6);

                    b.Property<string>("OrderNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Order No")
                        .HasColumnOrder(2);

                    b.Property<int>("State")
                        .HasColumnType("int")
                        .HasColumnName("Order Status")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("WhenOrdered")
                        .HasColumnType("datetime2")
                        .HasColumnName("Ordered At")
                        .HasColumnOrder(7);

                    b.HasKey("Key");

                    b.ToTable("OrderStorage");
                });

            modelBuilder.Entity("DAL.Models.ProductAttributeModel", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("AttachedToAttribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Attached Attribute Key")
                        .HasColumnOrder(4);

                    b.Property<string>("AttachedToProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Attached Product Key")
                        .HasColumnOrder(3);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Value")
                        .HasColumnOrder(2);

                    b.HasKey("Key");

                    b.HasIndex("AttachedToAttribute");

                    b.HasIndex("AttachedToProduct");

                    b.ToTable("ProductAttributeStorage");
                });

            modelBuilder.Entity("DAL.Models.ProductModel", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("AttachedToCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Attached Category Key")
                        .HasColumnOrder(8);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Product Code")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created At")
                        .HasColumnOrder(9);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image")
                        .HasColumnOrder(6);

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Long Description")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Modified At")
                        .HasColumnOrder(10);

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price")
                        .HasColumnOrder(7);

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Product")
                        .HasColumnOrder(3);

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Short Description")
                        .HasColumnOrder(4);

                    b.HasKey("Key");

                    b.HasIndex("AttachedToCategory");

                    b.ToTable("ProductStorage");
                });

            modelBuilder.Entity("DAL.Models.StoredOrderModel", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address")
                        .HasColumnOrder(3);

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("Ordered Amount");

                    b.Property<string>("AttachedProduct")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attached Product")
                        .HasColumnOrder(5);

                    b.Property<string>("AttachedUsername")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attached User")
                        .HasColumnOrder(6);

                    b.Property<string>("OrderNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Order No")
                        .HasColumnOrder(2);

                    b.Property<int>("State")
                        .HasColumnType("int")
                        .HasColumnName("Order Status")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("WhenOrdered")
                        .HasColumnType("datetime2")
                        .HasColumnName("Ordered At")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("WhenUnordered")
                        .HasColumnType("datetime2")
                        .HasColumnName("Unordered At")
                        .HasColumnOrder(8);

                    b.HasKey("Key");

                    b.ToTable("StoredOrderStorage");
                });

            modelBuilder.Entity("DAL.Models.SupplyModel", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("Available Amount")
                        .HasColumnOrder(2);

                    b.Property<string>("AttachedProduct")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attached Product")
                        .HasColumnOrder(4);

                    b.Property<string>("OfCategory")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attached To Category")
                        .HasColumnOrder(3);

                    b.HasKey("Key");

                    b.ToTable("SupplyStorage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "575a4866-454a-45b8-bb9b-4788448cb666",
                            ConcurrencyStamp = "e9674a75-1d68-4c0d-b05c-fb1d0e948eb4",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "dc50b8d3-b6a6-46b6-a910-9a33865f54aa",
                            ConcurrencyStamp = "04db2153-44fd-40d5-b511-47014def8b50",
                            Name = "Unverified",
                            NormalizedName = "UNVERIFIED"
                        },
                        new
                        {
                            Id = "a68b87f2-25b6-4670-88a7-8565a6d3cc1e",
                            ConcurrencyStamp = "732f45a6-7c94-4304-8eea-ae18ac97eaaf",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "47c76f67-dabb-4328-b778-9ef604f56bb7",
                            RoleId = "a68b87f2-25b6-4670-88a7-8565a6d3cc1e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DAL.Models.AttributeGroupModel", b =>
                {
                    b.HasOne("DAL.Models.CategoryModel", "CategoryNav")
                        .WithMany("AttachedGroups")
                        .HasForeignKey("AttachedToCategory");

                    b.Navigation("CategoryNav");
                });

            modelBuilder.Entity("DAL.Models.AttributeModel", b =>
                {
                    b.HasOne("DAL.Models.AttributeGroupModel", "GroupNav")
                        .WithMany("AttachedAttributes")
                        .HasForeignKey("AttachedToGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupNav");
                });

            modelBuilder.Entity("DAL.Models.CategoryModel", b =>
                {
                    b.HasOne("DAL.Models.CategoryModel", "CategoryNav")
                        .WithMany()
                        .HasForeignKey("AttachedToCategory");

                    b.Navigation("CategoryNav");
                });

            modelBuilder.Entity("DAL.Models.ProductAttributeModel", b =>
                {
                    b.HasOne("DAL.Models.AttributeModel", "AttributeNav")
                        .WithMany("AttachedValues")
                        .HasForeignKey("AttachedToAttribute")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.ProductModel", "ProductNav")
                        .WithMany("AttachedValues")
                        .HasForeignKey("AttachedToProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeNav");

                    b.Navigation("ProductNav");
                });

            modelBuilder.Entity("DAL.Models.ProductModel", b =>
                {
                    b.HasOne("DAL.Models.CategoryModel", "CategoryNav")
                        .WithMany("AttachedProducts")
                        .HasForeignKey("AttachedToCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryNav");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.AttributeGroupModel", b =>
                {
                    b.Navigation("AttachedAttributes");
                });

            modelBuilder.Entity("DAL.Models.AttributeModel", b =>
                {
                    b.Navigation("AttachedValues");
                });

            modelBuilder.Entity("DAL.Models.CategoryModel", b =>
                {
                    b.Navigation("AttachedGroups");

                    b.Navigation("AttachedProducts");
                });

            modelBuilder.Entity("DAL.Models.ProductModel", b =>
                {
                    b.Navigation("AttachedValues");
                });
#pragma warning restore 612, 618
        }
    }
}
